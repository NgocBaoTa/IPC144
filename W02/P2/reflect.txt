///////////////////////////////////////////////////////////////////////////
                              Reflection
                          Workshop - #2 (P2)
Full Name  : Bao Ngoc Ta
Student ID#: 116038225		
Email      : bta@myseneca.ca
Section    : E

Authenticity Declaration:

I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. In the sample 1, I think it's the floating point number and rounding 
problem. Also float and double types have a limited number of bits so, they 
can not store all floating point values exactly, but because double type has 
more bits than float => double type can store value more exactly


- variable price1 is equal to 17.959999 
=> prices1 * 100 = 1795.9999 then be assigned to integer type => loss of the 
fractional part of the number => 1795 as cent value

2. When working with mixed-type expressions, we need convert operands of one
type to another type, which is called coercion
- money is int type, 100.0 is double type which is higher type, so if money 
devides by 100.0 => C compilers promote money to double type => receive 
double type for result 
- money is int type, 100 is int type but if money or 100 is casted to double 
explicitly => result will be in double type
 
3a. The value of the variable result is 72 because both 100 and variable money 
are integer so their division yields as a whole number (integer)

3b. Sample 1: $0.00
    Sample 2: $72
    Sample 3; $0.00
    Sample 4: $72

3c. money / 100 and result are integer but %lf indicate that the data should be
double => wrong format string => undefined bahaviour 
(money / 100 and result cannot be promoted to double type just by this way)